/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export declare namespace MeloVault {
  export type TransactionStruct = {
    to: PromiseOrValue<string>
    value: PromiseOrValue<BigNumberish>
    data: PromiseOrValue<BytesLike>
    gas: PromiseOrValue<BigNumberish>
  }

  export type TransactionStructOutput = [string, BigNumber, string, BigNumber] & {
    to: string
    value: BigNumber
    data: string
    gas: BigNumber
  }

  export type ProposalStruct = {
    endBlock: PromiseOrValue<BigNumberish>
    title: PromiseOrValue<string>
    descriptionHash: PromiseOrValue<string>
    transactions: MeloVault.TransactionStruct[]
  }

  export type ProposalStructOutput = [BigNumber, string, string, MeloVault.TransactionStructOutput[]] & {
    endBlock: BigNumber
    title: string
    descriptionHash: string
    transactions: MeloVault.TransactionStructOutput[]
  }
}

export interface VaultAbiInterface extends utils.Interface {
  functions: {
    'blocksAllowedForExecution()': FunctionFragment
    'executeProposal((uint256,string,string,(address,uint256,bytes,uint256)[]),bytes)': FunctionFragment
    'executed(bytes32)': FunctionFragment
    'maxBlocksInFuture()': FunctionFragment
    'name()': FunctionFragment
    'nft()': FunctionFragment
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment
    'proposalHash((uint256,string,string,(address,uint256,bytes,uint256)[]))': FunctionFragment
    'proposals(bytes32)': FunctionFragment
    'propose((uint256,string,string,(address,uint256,bytes,uint256)[]))': FunctionFragment
    'setVerifier(address)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'verifier()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'blocksAllowedForExecution'
      | 'executeProposal'
      | 'executed'
      | 'maxBlocksInFuture'
      | 'name'
      | 'nft'
      | 'onERC1155BatchReceived'
      | 'onERC1155Received'
      | 'onERC721Received'
      | 'proposalHash'
      | 'proposals'
      | 'propose'
      | 'setVerifier'
      | 'supportsInterface'
      | 'verifier'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'blocksAllowedForExecution', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'executeProposal',
    values: [MeloVault.ProposalStruct, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'executed', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'maxBlocksInFuture', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'proposalHash', values: [MeloVault.ProposalStruct]): string
  encodeFunctionData(functionFragment: 'proposals', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'propose', values: [MeloVault.ProposalStruct]): string
  encodeFunctionData(functionFragment: 'setVerifier', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
  encodeFunctionData(functionFragment: 'verifier', values?: undefined): string

  decodeFunctionResult(functionFragment: 'blocksAllowedForExecution', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executeProposal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'executed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxBlocksInFuture', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC1155BatchReceived', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC1155Received', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proposalHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'propose', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setVerifier', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result

  events: {
    'MeloVaultCreated(string,address)': EventFragment
    'ProposalCreated(bytes32,bytes32,tuple)': EventFragment
    'ProposalExecuted(bytes32,tuple)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'MeloVaultCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment
}

export interface MeloVaultCreatedEventObject {
  name: string
  token: string
}
export type MeloVaultCreatedEvent = TypedEvent<[string, string], MeloVaultCreatedEventObject>

export type MeloVaultCreatedEventFilter = TypedEventFilter<MeloVaultCreatedEvent>

export interface ProposalCreatedEventObject {
  id: string
  snapshotBlockHash: string
  proposal: MeloVault.ProposalStructOutput
}
export type ProposalCreatedEvent = TypedEvent<
  [string, string, MeloVault.ProposalStructOutput],
  ProposalCreatedEventObject
>

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>

export interface ProposalExecutedEventObject {
  id: string
  proposal: MeloVault.ProposalStructOutput
}
export type ProposalExecutedEvent = TypedEvent<[string, MeloVault.ProposalStructOutput], ProposalExecutedEventObject>

export type ProposalExecutedEventFilter = TypedEventFilter<ProposalExecutedEvent>

export interface VaultAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: VaultAbiInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    blocksAllowedForExecution(overrides?: CallOverrides): Promise<[BigNumber]>

    executeProposal(
      proposal: MeloVault.ProposalStruct,
      fact: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    executed(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

    maxBlocksInFuture(overrides?: CallOverrides): Promise<[BigNumber]>

    name(overrides?: CallOverrides): Promise<[string]>

    nft(overrides?: CallOverrides): Promise<[string]>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>

    proposalHash(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<[string]>

    proposals(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>

    propose(
      proposal: MeloVault.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

    verifier(overrides?: CallOverrides): Promise<[string]>
  }

  blocksAllowedForExecution(overrides?: CallOverrides): Promise<BigNumber>

  executeProposal(
    proposal: MeloVault.ProposalStruct,
    fact: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  executed(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

  maxBlocksInFuture(overrides?: CallOverrides): Promise<BigNumber>

  name(overrides?: CallOverrides): Promise<string>

  nft(overrides?: CallOverrides): Promise<string>

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>

  proposalHash(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<string>

  proposals(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

  propose(
    proposal: MeloVault.ProposalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setVerifier(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

  verifier(overrides?: CallOverrides): Promise<string>

  callStatic: {
    blocksAllowedForExecution(overrides?: CallOverrides): Promise<BigNumber>

    executeProposal(
      proposal: MeloVault.ProposalStruct,
      fact: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    executed(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    maxBlocksInFuture(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    nft(overrides?: CallOverrides): Promise<string>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>

    proposalHash(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<string>

    proposals(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    propose(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<void>

    setVerifier(_verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    verifier(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'MeloVaultCreated(string,address)'(
      name?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): MeloVaultCreatedEventFilter
    MeloVaultCreated(
      name?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): MeloVaultCreatedEventFilter

    'ProposalCreated(bytes32,bytes32,tuple)'(
      id?: PromiseOrValue<BytesLike> | null,
      snapshotBlockHash?: null,
      proposal?: MeloVault.ProposalStruct | null
    ): ProposalCreatedEventFilter
    ProposalCreated(
      id?: PromiseOrValue<BytesLike> | null,
      snapshotBlockHash?: null,
      proposal?: MeloVault.ProposalStruct | null
    ): ProposalCreatedEventFilter

    'ProposalExecuted(bytes32,tuple)'(
      id?: PromiseOrValue<BytesLike> | null,
      proposal?: MeloVault.ProposalStruct | null
    ): ProposalExecutedEventFilter
    ProposalExecuted(
      id?: PromiseOrValue<BytesLike> | null,
      proposal?: MeloVault.ProposalStruct | null
    ): ProposalExecutedEventFilter
  }

  estimateGas: {
    blocksAllowedForExecution(overrides?: CallOverrides): Promise<BigNumber>

    executeProposal(
      proposal: MeloVault.ProposalStruct,
      fact: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    executed(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    maxBlocksInFuture(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    nft(overrides?: CallOverrides): Promise<BigNumber>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proposalHash(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<BigNumber>

    proposals(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    propose(
      proposal: MeloVault.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

    verifier(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    blocksAllowedForExecution(overrides?: CallOverrides): Promise<PopulatedTransaction>

    executeProposal(
      proposal: MeloVault.ProposalStruct,
      fact: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    executed(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxBlocksInFuture(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    proposalHash(proposal: MeloVault.ProposalStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

    proposals(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    propose(
      proposal: MeloVault.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
